Understanding Object-Oriented Programming (OOP) in Java
Object-Oriented Programming (OOP) is a programming paradigm based on the concept of "objects." It allows developers to create programs that are modular, reusable, and easy to maintain by organizing code into objects, which represent real-world entities. OOP is fundamental in Java and many other programming languages.

Key Concepts of OOP

1.Classes and Objects
2.Encapsulation
3.Inheritance
4.Polymorphism
5.Abstraction

Lets break down each concept with easy explanations and examples.

 Classes and Objects
Class: A class is a blueprint or template for creating objects. It defines properties (attributes) and methods (functions) that the objects created from the class will have.
Object: An object is an instance of a class. It represents a real-world entity with a specific state (attributes) and behavior (methods).
Example:
Think of a class as a "Car blueprint." It defines what a car should have (like wheels, engine, color) and what it can do (like start, stop, accelerate).

Java Code Example:

// Defining a class named Car
class Car {
    // Properties (attributes) of the class
    String color;
    String model;
    int year;

    // Method (function) of the class
    void start() {
        System.out.println("Car is starting.");
    }

    void stop() {
        System.out.println("Car is stopping.");
    }
}

public class Syntax {
    public static void main(String[] args) {
        // Creating an object of the Car class
        Car myCar = new Car();
        myCar.color = "Red";
        myCar.model = "Toyota";
        myCar.year = 2020;

        // Using object methods
        myCar.start(); // Output: Car is starting.
        myCar.stop();  // Output: Car is stopping.
    }
}

Explanation:
The Car class defines attributes like color, model, and year, and methods like start() and stop().
The myCar object is created from the Car class and is used to call methods and set attributes.


2. Encapsulation

Encapsulation is the concept of bundling data (attributes) and methods that operate on the data into a single unit, a class. It restricts direct access to some of the object's components, which is achieved using access modifiers (private, public, protected).
It helps in data protection and hides the internal implementation from the outside world.
Example:
A real-world example would be a TV remote control. The user can change channels or adjust the volume using buttons, but they do not know or need to know the internal workings of the remote.

Java Code Example:

class Person {
    // Private data members (attributes)
    private String name;
    private int age;

    // Public methods to access and modify private data (getters and setters)
    public String getName() {
        return name;
    }

    public void setName(String newName) {
        this.name = newName;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int newAge) {
        this.age = newAge;
    }
}

public class Syntax {
    public static void main(String[] args) {
        Person person = new Person();
        person.setName("Alice");
        person.setAge(30);
        
        System.out.println("Name: " + person.getName()); // Output: Name: Alice
        System.out.println("Age: " + person.getAge());   // Output: Age: 30
    }
}

Encapsulation in More Detail:

Encapsulation is often implemented using access modifiers to restrict access to the fields and methods of a class. Lets explore how access modifiers like private, protected, and public are used in Java:

private: The field or method is accessible only within its own class.
public: The field or method is accessible from any other class.
protected: The field or method is accessible within its own package and by subclasses.
default (no modifier): The field or method is accessible only within its own package.



3. Inheritance
Inheritance allows one class (child or subclass) to inherit the properties and methods of another class (parent or superclass). It promotes code reusability and a hierarchical class structure.
Inheritance is represented using the extends keyword.
Example:
A Dog is a type of Animal. So, the Dog class can inherit common properties and methods from the Animal class.

Java Code Example:

// Parent class
class Animal {
    void eat() {
        System.out.println("Animal is eating.");
    }
}

// Child class inheriting from Animal
class Dog extends Animal {
    void bark() {
        System.out.println("Dog is barking.");
    }
}

public class Syntax {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();  // Output: Animal is eating.
        dog.bark(); // Output: Dog is barking.
    }
}

Inheritance in More Detail:

Inheritance in Java allows classes to inherit features (fields and methods) from other classes. There are several types of inheritance:

Single Inheritance: A class inherits from one superclass.
Multilevel Inheritance: A class inherits from a superclass, and another class inherits from that subclass.
Hierarchical Inheritance: Multiple classes inherit from a single superclass.

4. Polymorphism

Polymorphism means "many shapes" and allows objects to be treated as instances of their parent class. There are two types of polymorphism:
Compile-time (Method Overloading): Multiple methods in the same class with the same name but different parameters.
Run-time (Method Overriding): A subclass provides a specific implementation of a method already defined in its superclass.
Example:
Different animals make different sounds, but they all share a common behavior called makeSound.

Java Code Example:
// Parent class
class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound.");
    }
}

// Subclass overriding the makeSound method
class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks.");
    }
}

public class Syntax {
    public static void main(String[] args) {
        Animal myAnimal = new Animal();
        Animal myDog = new Dog(); // Polymorphism

        myAnimal.makeSound(); // Output: Animal makes a sound.
        myDog.makeSound();    // Output: Dog barks.
    }
}

Polymorphism in More Detail:

Polymorphism means using the same interface for different underlying forms (data types). There are two main types of polymorphism:

Compile-time Polymorphism (Method Overloading): Same method name but different parameters (different number or types of parameters).

Run-time Polymorphism (Method Overriding): A subclass provides a specific implementation of a method already defined in its superclass.

5. Abstraction
Abstraction is the concept of hiding complex implementation details and showing only the necessary features of an object.
In Java, abstraction is achieved using abstract classes (which cannot be instantiated and may contain abstract methods) or interfaces (which define methods that must be implemented by a class).

Example:

A real-world example is a TV remote. You know which buttons to press to change the channel or volume but not how these operations are internally implemented.

Java Code Example:
// Abstract class
abstract class Vehicle {
    abstract void start(); // Abstract method (no body)
    void stop() {
        System.out.println("Vehicle is stopping.");
    }
}

// Subclass implementing abstract method
class Car extends Vehicle {
    @Override
    void start() {
        System.out.println("Car is starting.");
    }
}

public class Syntax {
    public static void main(String[] args) {
        Vehicle myCar = new Car();
        myCar.start(); // Output: Car is starting.
        myCar.stop();  // Output: Vehicle is stopping.
    }
}

Abstraction in More Detail:

Abstraction focuses on hiding the complexity of the system by providing a simple interface. In Java, abstract classes and interfaces are used to achieve abstraction.

Abstract Class: A class that cannot be instantiated and may contain abstract methods (methods without a body).
Interface: A reference type in Java that contains only abstract methods (until Java 8) or methods with default implementation (from Java 8 onward).


Summary of OOP Concepts:

Classes and Objects: Blueprints for creating objects that represent real-world entities.
Encapsulation: Protects data by hiding internal details and exposing only what is necessary.
Inheritance: Enables classes to inherit properties and methods from other classes, promoting code reuse.
Polymorphism: Allows objects to be treated as instances of their parent class, supporting multiple forms (method overloading and overriding).
Abstraction: Hides complex details and exposes only essential features, making the system easier to use and maintain.